{
  "id": null,
  "uid": "lse-articles",
  "title": "LSE Articles",
  "schemaVersion": 39,
  "version": 1,
  "time": { "from": "now-24h", "to": "now" },
  "timezone": "utc",
  "templating": {
    "list": [
      {
        "name": "ticker",
        "type": "query",
        "label": "Ticker",
        "datasource": { "type": "influxdb", "uid": "influxdb-flux" },
        "definition": "import \"influxdata/influxdb/schema\"\nschema.tagValues(bucket: v.bucket, tag: \"ticker\")",
        "query": "import \"influxdata/influxdb/schema\"\nschema.tagValues(bucket: v.bucket, tag: \"ticker\")",
        "refresh": 2,
        "multi": true,
        "includeAll": true,
        "allValue": ".*",
        "current": { "text": "All", "value": "$__all" }
      },
      {
        "name": "source",
        "type": "query",
        "label": "Source",
        "datasource": { "type": "influxdb", "uid": "influxdb-flux" },
        "definition": "import \"influxdata/influxdb/schema\"\nschema.tagValues(bucket: v.bucket, tag: \"source\")",
        "query": "import \"influxdata/influxdb/schema\"\nschema.tagValues(bucket: v.bucket, tag: \"source\")",
        "refresh": 2,
        "multi": true,
        "includeAll": true,
        "allValue": ".*",
        "current": { "text": "All", "value": "$__all" }
      },
      {
        "name": "q",
        "type": "textbox",
        "label": "Search (title+summary)",
        "query": "",
        "current": { "text": "", "value": "" }
      }
    ]
  },

  "panels": [
    {
      "type": "table",
      "title": "Articles",
      "gridPos": { "h": 22, "w": 24, "x": 0, "y": 0 },
      "targets": [
        {
          "datasource": { "type": "influxdb", "uid": "influxdb-flux" },
          "query": "import \"strings\"\nq = \"${q}\"\nfrom(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"lse_news\")\n  |> filter(fn: (r) => r.ticker =~ /^${ticker:regex}$/)\n  |> filter(fn: (r) => r.source =~ /^${source:regex}$/)\n  |> pivot(rowKey: [\"_time\",\"ticker\",\"source\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> map(fn: (r) => ({ r with _title_lc: strings.toLower(v: string(v: r.title)), _summary_lc: strings.toLower(v: string(v: r.summary)) }))\n  |> filter(fn: (r) => q == \"\" or strings.containsStr(v: r._title_lc, substr: strings.toLower(v: q)) or strings.containsStr(v: r._summary_lc, substr: strings.toLower(v: q)))\n  |> keep(columns: [\"_time\",\"ticker\",\"source\",\"title\",\"summary\",\"url\"]) \n  |> sort(columns: [\"_time\"], desc: true)"
        }
      ],
      "options": { "showHeader": true },
      "fieldConfig": {
        "defaults": { "custom": { "align": "auto" } },
        "overrides": [
          {
            "matcher": { "id": "byName", "options": "url" },
            "properties": [
              { "id": "links", "value": [ { "title": "Open", "url": "${__cell}", "targetBlank": true } ] }
            ]
          },
          {
            "matcher": { "id": "byName", "options": "_time" },
            "properties": [ { "id": "unit", "value": "dateTimeAsLocal" } ]
          }
        ]
      },
      "transformations": [
        {
          "id": "organize",
          "options": {
            "indexByName": true,
            "renameByName": {
              "_time": "Time",
              "ticker": "Ticker",
              "source": "Source",
              "title": "Title",
              "summary": "Summary",
              "url": "URL"
            }
          }
        }
      ]
    }
  ]
}

